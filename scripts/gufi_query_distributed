#!/usr/bin/env python3
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



import gufi_common
import gufi_distributed

# run this file with sbatch on a single node

def add_args(args):
    cmd = []

    if args.I:
        cmd += ['-I', args.I]

    if args.T:
        cmd += ['-T', args.T]

    if args.S:
        cmd += ['-S', args.S]

    if args.E:
        cmd += ['-E', args.E]

    if args.K:
        cmd += ['-K', args.K]

    if args.J:
        cmd += ['-J', args.J]

    if args.G:
        cmd += ['-G', args.G]

    if args.F:
        cmd += ['-F', args.F]

    cmd += [args.GUFI_index]

    return cmd

# run gufi_query via sbatch
def schedule_work(args, _idx, start, end):
    cmd = [
        args.sbatch, '--nodes=1',
        args.gufi_query,
        '-n', str(args.threads),
        '-y', str(args.level),
        '-D', start, end,
    ] + add_args(args)

    return gufi_distributed.run_slurm(cmd, args.dry_run)

def schedule_top(args, jobids):
    print("    Query upper directories up to and including level {0}".format(args.level - 1))

    cmd = [args.sbatch, '--nodes=1']
    cmd += gufi_distributed.depend_on_slurm_jobids(jobids)
    cmd += [
        args.gufi_query,
        '-n', str(args.threads),
        '-z', str(args.level - 1),
    ] + add_args(args)

    return gufi_distributed.run_slurm(cmd, args.dry_run)

def parse_args():
    parser = gufi_distributed.parse_args('gufi_query_distributed',
                                         'Script for distributing gufi_query across nodes')

    parser.add_argument('--dry-run',             action='store_true')
    parser.add_argument('--gufi_query',          metavar='path',
                        type=str,
                        default='gufi_query.sbatch')
    parser.add_argument('--threads',       '-n', metavar='n',
                        type=gufi_common.get_positive,
                        default=1)

    parser.add_argument('-I', metavar='SQL', type=str)
    parser.add_argument('-T', metavar='SQL', type=str)
    parser.add_argument('-S', metavar='SQL', type=str)
    parser.add_argument('-E', metavar='SQL', type=str)
    parser.add_argument('-K', metavar='SQL', type=str)
    parser.add_argument('-J', metavar='SQL', type=str)
    parser.add_argument('-G', metavar='SQL', type=str)
    parser.add_argument('-F', metavar='SQL', type=str)

    parser.add_argument('GUFI_index',
                        type=gufi_distributed.dir_arg)

    return parser.parse_args()

def main():
    args = parse_args()

    jobids = gufi_distributed.distribute_work(args.GUFI_index, args.level, args.nodes,
                                              lambda idx, start, end: schedule_work(args, idx, start, end),
                                              lambda jobids: schedule_top(args, jobids))

    print('cat the following slurm job output files to get complete results:')
    for jobid in jobids:
        print('    {0}'.format(jobid))

if __name__ == '__main__':
    main()
